Contents

I.   Overview
II.  Building kata-ckan-dev
III. Installation of kata-ckan-dev
IV.  Building kata-ckan-prod
V.   Installing kata-ckan-prod
VI.  Administrative tasks

I. Overview 

Kata building and installation comprises 2 packages on 3 (virtual) machines
as follows:

1. Build kata-ckan-dev package on development machine 1
2. Install kata-ckan-dev package on development machine 2
3. Build kata-ckan-prod on development machine 2
4. Install kata-ckan-prod on production machine

Rationale:

CKAN installation gets code from from may different web sites and even
directly from version control systems. Experience shows that even
within a couple of days such an installation might no longer
reproducible, because some upstream component has changed. In order to
achieve reproducible results we use 2 rpm-packages

1. ckan-kat-dev: This package does not contain the code but an
   automatic installation and setup mechanism. Installation will be
   done in an development environment. It is the goal that this
   installation is fully functional and as close as possible to the
   production environment. Repeated installation will no longer lead
   to the same results after upstream has made a change.

2. ckan-kat-prod: This package contains the full code. It will be captured
   in a development environment after ckan-kat-dev has been installed.
   Repeated installation of ckan-kat-prod will lead to the same result.

In an ideal world development machine 1 and development machine 2
could be the same machine. However, especially during development work
repeated installation and installation of a package might lead to
leftovers with undesirable side effects. So I use development machine
1 as my real development machine where I do the coding. Development
machine 2 is reinitialized (from a VM disk image) each time to make
sure that no leftovers from previous development cycles end up in the
production package.

The assumption is that the production machine is dedicated for Kata.
When setting up e. g. the postgres database or the firewall we assume
that nobody else uses them. During uninstallation we assume that we
don't have to preserve anything but data generated by
Kata. (Uninstallation as such is not an important use case but
upgrade is. And upgrade is roughly equivalent to uninstallation of the
previous package and installation of the new one.)


II. Building kata-ckan-dev

kata-ckan-dev is built in development machine 1. 

Building has been tested in a plain minimal CentOS 6.3
installation. For my own administration I had already installed

- openssh-client
- make & git (they are needed by etckeeper, which I install from source)

Not sure whether any of those is really needed.

Setting up the build environment has been automated in ./setup-buildenv.sh

It will install 2 packages ...

- rpm-build
- redhat-rpm-config

(not sure whether the latter one is needed)

... and set up your rpmbuild environment under ~/rpmbuild
like suggested in http://wiki.centos.org/HowTos/SetupRpmBuildEnvironment

For building the kata-ckan-dev package, go to subdirectory kata-ckan-dev and
call the script ./build-from-repo.sh


III. Installation of kata-ckan-dev

This step is done in development machine 2.

In a plain minimal operating system installation running rpm -i will fail
because of missing dependencies. These can be installed using a single command
line as follows:

$ sudo rpm -i kata-ckan-dev-305045-1.el6.i686.rpm 2>&1 | grep "is needed" | cut -c 2- | cut -f 1 -d " " | sudo xargs yum install -y

After that install the package

$ sudo rpm -i kata-ckan-dev-305045-1.el6.i686.rpm

This will result in a fully functional kata installation on the development
machine. 

Necessary user accounts will be created, ckan installed as a service
and the firewall will be opened for web access.

Kata might be used for some testing, but it's main purpose is to be
packaged for production.


IV. Building kata-ckan-prod

This will happen in development machine 2. Setting up the build
environment is identical to the steps in development machine one. Run
script ./setup-buildenv.sh

Building happens by changing to directory kata-ckan-prod and calling
the script ./build-from-repo.sh 

This step will package the current development installation and allow
multiple repeatable installations later.


V. Installing kata-ckan-prod

This step is carried out in the production machine.

In a plain mininal operating system installation running rpm -i will fail
because of missing dependencies. Currently 3 dependencies are required:

$ sudo yum install postgresql postgresql-server patch

After that the kata-ckan-prod package can be installed

$ sudo rpm -i kata-ckan-prod-335386-1.el6.x86_64.rpm

Necessary user accounts will be created automatically, ckan installed
as a service and the firewall will be opened for web access.


VI.  Administrative tasks

CKAN server is started automatically.

To verify whether it is running use

$ service ckan-dev status

To stop it use

# service ckan-dev stop

Note: The meaning of "dev" is somewhat overloaded. Here it does not
refer to the the dev.rpm (as opposed to the prod.rpm), but to CKAN's
internal development version of the web server (as opposed to
Apache). ckan-dev service is currently used on both the development
machine 2 and the production machine. Later we will switch to Apache, I 
guess)

